#!/usr/bin/env python
import json
import subprocess
from argparse import ArgumentParser, REMAINDER
import os
import socket
import getpass


class Launcher:
    def get(self, image, *args):
        output = subprocess.check_output("docker inspect %s" % image,
                                         shell=True)
        output = json.loads(output)[0]
        for a in args:
            if a not in output:
                return ""
            output = output[a]
        return output

    def getCmd(self, args):
        arr = self.get(args.image, "Config", "Cmd")
        if len(args.cmd) > 0:
            cmd = " ".join(args.cmd)
        elif len(arr) > 0:
            cmd = " ".join(arr)
        else:
            cmd = "/bin/bash"
        # single quotes around to directly pass this command to container!
        return ["'%s'" % cmd]

    def getPort(self, image):
        arr = self.get(image, "Config", "ExposedPorts")
        if len(arr) <= 0:
            return ""
        out = []
        for p in arr.keys():
            tmp = int(p.replace("/tcp", ""))
            # system ports?
            tmp1 = tmp + 8192 if tmp < 2048 else tmp
            out.append("-p %d:%d" % (tmp1, tmp))
        return out

    def __getIP(self, rhost):
        out = socket.getaddrinfo(rhost, 0)
        return out[0][4][0]

    def __getNFSinfo(self):
        out = subprocess.check_output("df . | tail -n1 | awk '{print $1}'",
                                      shell=True)
        out = out.rstrip()
        (rhost, vol) = out.split(":")
        ip = self.__getIP(rhost)
        basevol = os.path.basename(vol)
        return (ip, vol, basevol)

    def getNFSmount(self, args):
        cmd = []
        if not args.nfsmount:
            return cmd
        (ip, vol, basevol) = self.__getNFSinfo()
        volopts = [
            "o=addr=%s" % ip,
            "device=:%s" % vol,
            "type=nfs,source=%s,target=/work" % basevol
        ]
        mountopt = "type=volume"
        for vo in volopts:
            mountopt += ",volume-opt=%s" % vo
        cmd.append("--mount")
        cmd.append(mountopt)
        return cmd

    def getVols(self, args):
        vols = []
        for vol in args.v:
            vols.append("-v %s" % vol)
        # Prohibit pwd-mounting if nfsmount is set!
        if not args.nopwd and not args.nfsmount:
            vols.append("-v %s:/work:rw" % os.getcwd())
            vols.append("-w /work")
        return vols

    def getDns(self, args):
        dns = []
        for d in args.dns:
            dns.append("--dns %s" % d)
        return dns

    def getUser(self, args):
        out = []
        bindir = os.path.abspath(os.path.dirname(__file__))
        if args.runas == "user":
            out.append("-e RUNAS_UID=%d" % os.getuid())
            out.append("-e RUNAS_USER=%s" % getpass.getuser())
        elif args.runas == "uid":
            uid = os.getuid()
            gid = os.getgid()
            out.append("-u %d:%d" % (uid, gid))
            out.append("-e RUNAS_USER=%s" % getpass.getuser())
        return out

    def launch(self):
        args = self.getParser().parse_args()
        finalcmd = ["nvidia-docker", "run", "-it", "--rm"]
        finalcmd += self.getPort(args.image)
        finalcmd += self.getVols(args)
        finalcmd += self.getNFSmount(args)
        finalcmd += self.getUser(args)
        finalcmd += self.getDns(args)
        if args.ipc is not None:
            finalcmd += ["--ipc=%s" % args.ipc]
        if args.security is not None:
            finalcmd += ["--security-opt=\"%s\"" % args.security]
        finalcmd.append(args.image)
        finalcmd += self.getCmd(args)
        finalcmd = " ".join(finalcmd)
        print(finalcmd)
        subprocess.check_call(finalcmd, shell=True)
        return

    def getParser(self):
        parser = ArgumentParser(description="Wrapper to launch as current user")
        parser.add_argument("-v", default=[], action="append", type=str,
                            help="Volumes to mount. Same syntax as docker run")
        parser.add_argument(
            "-runas", choices=["user", "root", "uid"],
            default="root", type=str,
            help="Run as specified. Default is root. Options: "
            " user [run as current user by switching user inside the container]"
            " root [run as root, without any of these switching abilities]"
            " uid  ['-u' option to docker. To run on non-privileged containers]")
        parser.add_argument("-security", type=str, default=None,
                            help="Same as --security-opt option of docker")
        parser.add_argument("-nopwd", action="store_true", default=False,
                            help="Do not mount current dir as /work")
        parser.add_argument(
            "-nfsmount", action="store_true", default=False,
            help="Mount the nfs-root of current dir as /work. Implies -nopwd")
        parser.add_argument("-dns", default=[], action="append", type=str,
                            help="Pass DNS servers to be used inside container")
        parser.add_argument(
            "-ipc", default=None, type=str,
            help="how to use shared memory between processes.")
        parser.add_argument("image", help="Image to be launched")
        parser.add_argument("cmd", nargs=REMAINDER,
                            help="Command to run inside the container")
        return parser

if __name__ == "__main__":
    Launcher().launch()
